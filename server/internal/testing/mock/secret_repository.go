// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/secret_repository.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/artem-benda/gophkeeper/server/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSecretRepository is a mock of SecretRepository interface.
type MockSecretRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSecretRepositoryMockRecorder
}

// MockSecretRepositoryMockRecorder is the mock recorder for MockSecretRepository.
type MockSecretRepositoryMockRecorder struct {
	mock *MockSecretRepository
}

// NewMockSecretRepository creates a new mock instance.
func NewMockSecretRepository(ctrl *gomock.Controller) *MockSecretRepository {
	mock := &MockSecretRepository{ctrl: ctrl}
	mock.recorder = &MockSecretRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretRepository) EXPECT() *MockSecretRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSecretRepository) Delete(ctx context.Context, userID int64, guid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, guid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretRepositoryMockRecorder) Delete(ctx, userID, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretRepository)(nil).Delete), ctx, userID, guid)
}

// Get mocks base method.
func (m *MockSecretRepository) Get(ctx context.Context, userID int64, guid string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, guid)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretRepositoryMockRecorder) Get(ctx, userID, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretRepository)(nil).Get), ctx, userID, guid)
}

// GetByUserID mocks base method.
func (m *MockSecretRepository) GetByUserID(ctx context.Context, userID int64) ([]entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockSecretRepositoryMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockSecretRepository)(nil).GetByUserID), ctx, userID)
}

// Insert mocks base method.
func (m *MockSecretRepository) Insert(ctx context.Context, userID int64, guid, name string, encPayload []byte, clientTimestamp time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, userID, guid, name, encPayload, clientTimestamp)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockSecretRepositoryMockRecorder) Insert(ctx, userID, guid, name, encPayload, clientTimestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSecretRepository)(nil).Insert), ctx, userID, guid, name, encPayload, clientTimestamp)
}

// Update mocks base method.
func (m *MockSecretRepository) Update(ctx context.Context, userID int64, guid, name string, encPayload []byte, clientTimestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userID, guid, name, encPayload, clientTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSecretRepositoryMockRecorder) Update(ctx, userID, guid, name, encPayload, clientTimestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretRepository)(nil).Update), ctx, userID, guid, name, encPayload, clientTimestamp)
}
