// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/secret_service.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	context "context"
	reflect "reflect"

	entity "github.com/artem-benda/gophkeeper/server/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSecretService) Add(ctx context.Context, userID int64, name string, encPayload []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, name, encPayload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSecretServiceMockRecorder) Add(ctx, userID, name, encPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSecretService)(nil).Add), ctx, userID, name, encPayload)
}

// Edit mocks base method.
func (m *MockSecretService) Edit(ctx context.Context, userID int64, guid, name string, encPayload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, userID, guid, name, encPayload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockSecretServiceMockRecorder) Edit(ctx, userID, guid, name, encPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockSecretService)(nil).Edit), ctx, userID, guid, name, encPayload)
}

// Get mocks base method.
func (m *MockSecretService) Get(ctx context.Context, userID int64, guid string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, guid)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretServiceMockRecorder) Get(ctx, userID, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretService)(nil).Get), ctx, userID, guid)
}

// GetByUserID mocks base method.
func (m *MockSecretService) GetByUserID(ctx context.Context, userID int64) ([]entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockSecretServiceMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockSecretService)(nil).GetByUserID), ctx, userID)
}

// Remove mocks base method.
func (m *MockSecretService) Remove(ctx context.Context, userID int64, guid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, userID, guid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSecretServiceMockRecorder) Remove(ctx, userID, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSecretService)(nil).Remove), ctx, userID, guid)
}
