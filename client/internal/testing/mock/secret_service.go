// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/secret_service.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	context "context"
	reflect "reflect"

	entity "github.com/artem-benda/gophkeeper/client/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// AddBankingCard mocks base method.
func (m *MockSecretService) AddBankingCard(ctx context.Context, name, number, owner, dueTo, cvv, metadata string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBankingCard", ctx, name, number, owner, dueTo, cvv, metadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBankingCard indicates an expected call of AddBankingCard.
func (mr *MockSecretServiceMockRecorder) AddBankingCard(ctx, name, number, owner, dueTo, cvv, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBankingCard", reflect.TypeOf((*MockSecretService)(nil).AddBankingCard), ctx, name, number, owner, dueTo, cvv, metadata)
}

// AddBinary mocks base method.
func (m *MockSecretService) AddBinary(ctx context.Context, name string, data []byte, metadata string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBinary", ctx, name, data, metadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBinary indicates an expected call of AddBinary.
func (mr *MockSecretServiceMockRecorder) AddBinary(ctx, name, data, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinary", reflect.TypeOf((*MockSecretService)(nil).AddBinary), ctx, name, data, metadata)
}

// AddLoginPassword mocks base method.
func (m *MockSecretService) AddLoginPassword(ctx context.Context, name, login, password, metadata string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLoginPassword", ctx, name, login, password, metadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLoginPassword indicates an expected call of AddLoginPassword.
func (mr *MockSecretServiceMockRecorder) AddLoginPassword(ctx, name, login, password, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLoginPassword", reflect.TypeOf((*MockSecretService)(nil).AddLoginPassword), ctx, name, login, password, metadata)
}

// AddText mocks base method.
func (m *MockSecretService) AddText(ctx context.Context, name, text, metadata string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddText", ctx, name, text, metadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddText indicates an expected call of AddText.
func (mr *MockSecretServiceMockRecorder) AddText(ctx, name, text, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddText", reflect.TypeOf((*MockSecretService)(nil).AddText), ctx, name, text, metadata)
}

// GetAll mocks base method.
func (m *MockSecretService) GetAll(ctx context.Context) ([]entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSecretServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSecretService)(nil).GetAll), ctx)
}

// GetByGUID mocks base method.
func (m *MockSecretService) GetByGUID(ctx context.Context, guid string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGUID", ctx, guid)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGUID indicates an expected call of GetByGUID.
func (mr *MockSecretServiceMockRecorder) GetByGUID(ctx, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGUID", reflect.TypeOf((*MockSecretService)(nil).GetByGUID), ctx, guid)
}

// Remove mocks base method.
func (m *MockSecretService) Remove(ctx context.Context, guid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, guid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSecretServiceMockRecorder) Remove(ctx, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSecretService)(nil).Remove), ctx, guid)
}

// ReplaceWithBankingCard mocks base method.
func (m *MockSecretService) ReplaceWithBankingCard(ctx context.Context, guid, name, number, owner, dueTo, cvv, metadata string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceWithBankingCard", ctx, guid, name, number, owner, dueTo, cvv, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceWithBankingCard indicates an expected call of ReplaceWithBankingCard.
func (mr *MockSecretServiceMockRecorder) ReplaceWithBankingCard(ctx, guid, name, number, owner, dueTo, cvv, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceWithBankingCard", reflect.TypeOf((*MockSecretService)(nil).ReplaceWithBankingCard), ctx, guid, name, number, owner, dueTo, cvv, metadata)
}

// ReplaceWithBinary mocks base method.
func (m *MockSecretService) ReplaceWithBinary(ctx context.Context, guid, name string, data []byte, metadata string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceWithBinary", ctx, guid, name, data, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceWithBinary indicates an expected call of ReplaceWithBinary.
func (mr *MockSecretServiceMockRecorder) ReplaceWithBinary(ctx, guid, name, data, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceWithBinary", reflect.TypeOf((*MockSecretService)(nil).ReplaceWithBinary), ctx, guid, name, data, metadata)
}

// ReplaceWithLoginPassword mocks base method.
func (m *MockSecretService) ReplaceWithLoginPassword(ctx context.Context, guid, name, login, password, metadata string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceWithLoginPassword", ctx, guid, name, login, password, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceWithLoginPassword indicates an expected call of ReplaceWithLoginPassword.
func (mr *MockSecretServiceMockRecorder) ReplaceWithLoginPassword(ctx, guid, name, login, password, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceWithLoginPassword", reflect.TypeOf((*MockSecretService)(nil).ReplaceWithLoginPassword), ctx, guid, name, login, password, metadata)
}

// ReplaceWithText mocks base method.
func (m *MockSecretService) ReplaceWithText(ctx context.Context, guid, name, text, metadata string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceWithText", ctx, guid, name, text, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceWithText indicates an expected call of ReplaceWithText.
func (mr *MockSecretServiceMockRecorder) ReplaceWithText(ctx, guid, name, text, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceWithText", reflect.TypeOf((*MockSecretService)(nil).ReplaceWithText), ctx, guid, name, text, metadata)
}
