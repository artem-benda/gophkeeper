// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/secret_repository.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	context "context"
	reflect "reflect"

	entity "github.com/artem-benda/gophkeeper/client/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSecretRepository is a mock of SecretRepository interface.
type MockSecretRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSecretRepositoryMockRecorder
}

// MockSecretRepositoryMockRecorder is the mock recorder for MockSecretRepository.
type MockSecretRepositoryMockRecorder struct {
	mock *MockSecretRepository
}

// NewMockSecretRepository creates a new mock instance.
func NewMockSecretRepository(ctrl *gomock.Controller) *MockSecretRepository {
	mock := &MockSecretRepository{ctrl: ctrl}
	mock.recorder = &MockSecretRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretRepository) EXPECT() *MockSecretRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSecretRepository) Add(ctx context.Context, name string, encPayload []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, name, encPayload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSecretRepositoryMockRecorder) Add(ctx, name, encPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSecretRepository)(nil).Add), ctx, name, encPayload)
}

// Edit mocks base method.
func (m *MockSecretRepository) Edit(ctx context.Context, guid, name string, encPayload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, guid, name, encPayload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockSecretRepositoryMockRecorder) Edit(ctx, guid, name, encPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockSecretRepository)(nil).Edit), ctx, guid, name, encPayload)
}

// GetAll mocks base method.
func (m *MockSecretRepository) GetAll(ctx context.Context) ([]entity.SecretEncrypted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.SecretEncrypted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSecretRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSecretRepository)(nil).GetAll), ctx)
}

// GetByGUID mocks base method.
func (m *MockSecretRepository) GetByGUID(ctx context.Context, guid string) (*entity.SecretEncrypted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGUID", ctx, guid)
	ret0, _ := ret[0].(*entity.SecretEncrypted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGUID indicates an expected call of GetByGUID.
func (mr *MockSecretRepositoryMockRecorder) GetByGUID(ctx, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGUID", reflect.TypeOf((*MockSecretRepository)(nil).GetByGUID), ctx, guid)
}

// Remove mocks base method.
func (m *MockSecretRepository) Remove(ctx context.Context, guid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, guid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSecretRepositoryMockRecorder) Remove(ctx, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSecretRepository)(nil).Remove), ctx, guid)
}
